//迭代
public ListNode reverseList(ListNode head) {
       ListNode prev =null;
        ListNode curr =head;
        ListNode tmp;
        while(curr!=null){
            tmp=curr.next;
            curr.next =prev;
            prev=curr;
            curr=tmp;
        }
        return prev;
    }
    
// 递归的方式反转链表
// 时间复杂度: O(n)
// 空间复杂度: O(n) （递归是占用空间的，占用空间的大小和递归深度成正比）
public class Solution {
    public ListNode reverseList(ListNode head) {
        // 递归终止条件
        if (head == null || head.next == null) {
            return head;
        }
        ListNode rhead = reverseList(head.next);
        // head->next此刻指向head后面的链表的尾节点
        // head->next->next = head把head节点放在了尾部
        head.next.next = head;
        head.next = null;
        return rhead;
    }
}
