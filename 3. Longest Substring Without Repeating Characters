class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int ans = 0;
        Map<Character,Integer> map = new HashMap<>();
        for(int end =0,start =0;end<n;end++){
        	char c =s.charAt(end);
        	if(map.containsKey(c)){
        		start = Math.max(start,map.get(c));
        	}
        	ans = Math.max(ans,end-start+1);
        	map.put(c,end+1);
        }
        return ans;
        
    }

}

滑动窗口，更新每个字符最后出现的位置。
如果该字符曾经出现过，更新开始的位置。
无论如何，每一轮都计算一个ans
时间复杂度N
空间N
